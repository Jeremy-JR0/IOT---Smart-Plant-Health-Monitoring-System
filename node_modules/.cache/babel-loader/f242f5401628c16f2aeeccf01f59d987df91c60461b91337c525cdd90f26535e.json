{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shado\\\\OneDrive\\\\Documents\\\\YEAR 4\\\\SEM 2\\\\Internet of Things\\\\IOT-Smart-Plant-Health-Monitoring-System\\\\src\\\\pages\\\\PlantCareAI.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../PlantCareAI.css'; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlantSearch() {\n  _s();\n  const [plantInfo, setPlantInfo] = useState(''); // Plant identification results\n  const [searchQuery, setSearchQuery] = useState(''); // User's search input\n  const [chatResponse, setChatResponse] = useState(''); // Chat API response\n\n  // Handle file capture (camera or file upload)\n  const handleCapture = async event => {\n    const file = event.target.files[0];\n    if (file) {\n      console.log(\"Captured file:\", file);\n      const formData = new FormData();\n      formData.append('images', file);\n      try {\n        const response = await fetch('https://my-api.plantnet.org/v2/identify/all?include-related-images=false&no-reject=false&nb-results=10&lang=en&api-key=2b10qBBsSVf9aXG04dEUCYzRO', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Plant Identification Response:\", result);\n\n        // Extract plant information from the first result\n        const firstPlant = result.results[0];\n        if (firstPlant) {\n          var _firstPlant$species, _firstPlant$species2, _firstPlant$species2$, _firstPlant$species3, _firstPlant$species3$, _firstPlant$species4, _firstPlant$species4$;\n          const scientificName = ((_firstPlant$species = firstPlant.species) === null || _firstPlant$species === void 0 ? void 0 : _firstPlant$species.scientificName) || 'Unknown Scientific Name';\n          const genusName = ((_firstPlant$species2 = firstPlant.species) === null || _firstPlant$species2 === void 0 ? void 0 : (_firstPlant$species2$ = _firstPlant$species2.genus) === null || _firstPlant$species2$ === void 0 ? void 0 : _firstPlant$species2$.scientificName) || 'Unknown Genus';\n          const familyName = ((_firstPlant$species3 = firstPlant.species) === null || _firstPlant$species3 === void 0 ? void 0 : (_firstPlant$species3$ = _firstPlant$species3.family) === null || _firstPlant$species3$ === void 0 ? void 0 : _firstPlant$species3$.scientificName) || 'Unknown Family';\n          const commonNames = ((_firstPlant$species4 = firstPlant.species) === null || _firstPlant$species4 === void 0 ? void 0 : (_firstPlant$species4$ = _firstPlant$species4.commonNames) === null || _firstPlant$species4$ === void 0 ? void 0 : _firstPlant$species4$.join(', ')) || 'No common names available';\n\n          // Set the plant information to only display the first result\n          const plantDetails = /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Scientific Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 18\n              }, this), \" \", scientificName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Genus:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 18\n              }, this), \" \", genusName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Family:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 18\n              }, this), \" \", familyName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Common Names:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 18\n              }, this), \" \", commonNames]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this)]\n          }, \"1\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this);\n          setPlantInfo(plantDetails); // Set the plant information\n        } else {\n          setPlantInfo(/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No plant data available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 24\n          }, this));\n        }\n      } catch (error) {\n        console.error('Error identifying the plant:', error);\n      }\n    }\n  };\n\n  // Handle search input and make an API call to Chat API\n  const handleChatGPTQuery = async () => {\n    if (searchQuery) {\n      try {\n        var _data$choices$, _data$choices$$messag;\n        const response = await fetch('https://api.deepbricks.ai/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer sk-Ya1lYbp8LYSBosl7WLBiWcaYCBaWCRoRMlABV0UBPubQPghg` // Replace with your actual key\n          },\n          body: JSON.stringify({\n            model: \"gpt-4o\",\n            messages: [{\n              role: \"user\",\n              content: searchQuery\n            }],\n            max_tokens: 500 // Increased token limit to allow for longer responses\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        const chatCompletion = ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || 'No response from ChatGPT';\n\n        // Update the state with the ChatGPT response\n        setChatResponse(chatCompletion);\n      } catch (error) {\n        console.error('Error fetching chat response:', error);\n        setChatResponse('Error fetching chat response.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plant-search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Learn more about your plants\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"/Picture4.png\",\n      alt: \"Plant\",\n      className: \"plant-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-capture\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"cameraInput\",\n        className: \"camera-label\",\n        children: \"Capture with Camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        capture: \"environment\" // Use the rear camera on mobile devices\n        ,\n        id: \"cameraInput\",\n        className: \"camera-input\",\n        onChange: handleCapture // This should work correctly now\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        placeholder: \"Search your plant...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter') handleChatGPTQuery();\n        } // Trigger on Enter key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), plantInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plant-info\",\n      children: plantInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }, this), chatResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-response\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Plant AI assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: chatResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 82\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(PlantSearch, \"ArlH8DJHdN8TiUQ2h+jinsk/rCw=\");\n_c = PlantSearch;\nexport default PlantSearch;\nvar _c;\n$RefreshReg$(_c, \"PlantSearch\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PlantSearch","_s","plantInfo","setPlantInfo","searchQuery","setSearchQuery","chatResponse","setChatResponse","handleCapture","event","file","target","files","console","log","formData","FormData","append","response","fetch","method","body","ok","Error","status","result","json","firstPlant","results","_firstPlant$species","_firstPlant$species2","_firstPlant$species2$","_firstPlant$species3","_firstPlant$species3$","_firstPlant$species4","_firstPlant$species4$","scientificName","species","genusName","genus","familyName","family","commonNames","join","plantDetails","children","fileName","_jsxFileName","lineNumber","columnNumber","error","handleChatGPTQuery","_data$choices$","_data$choices$$messag","headers","JSON","stringify","model","messages","role","content","max_tokens","data","chatCompletion","choices","message","className","src","alt","htmlFor","type","accept","capture","id","onChange","placeholder","value","e","onKeyDown","key","_c","$RefreshReg$"],"sources":["C:/Users/shado/OneDrive/Documents/YEAR 4/SEM 2/Internet of Things/IOT-Smart-Plant-Health-Monitoring-System/src/pages/PlantCareAI.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../PlantCareAI.css'; // Import the CSS file for styling\r\n\r\nfunction PlantSearch() {\r\n  const [plantInfo, setPlantInfo] = useState(''); // Plant identification results\r\n  const [searchQuery, setSearchQuery] = useState(''); // User's search input\r\n  const [chatResponse, setChatResponse] = useState(''); // Chat API response\r\n\r\n  // Handle file capture (camera or file upload)\r\n  const handleCapture = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      console.log(\"Captured file:\", file);\r\n\r\n      const formData = new FormData();\r\n      formData.append('images', file);\r\n\r\n      try {\r\n        const response = await fetch('https://my-api.plantnet.org/v2/identify/all?include-related-images=false&no-reject=false&nb-results=10&lang=en&api-key=2b10qBBsSVf9aXG04dEUCYzRO', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log(\"Plant Identification Response:\", result);\r\n\r\n        // Extract plant information from the first result\r\n        const firstPlant = result.results[0];\r\n        if (firstPlant) {\r\n          const scientificName = firstPlant.species?.scientificName || 'Unknown Scientific Name';\r\n          const genusName = firstPlant.species?.genus?.scientificName || 'Unknown Genus';\r\n          const familyName = firstPlant.species?.family?.scientificName || 'Unknown Family';\r\n          const commonNames = firstPlant.species?.commonNames?.join(', ') || 'No common names available';\r\n\r\n          // Set the plant information to only display the first result\r\n          const plantDetails = (\r\n            <div key=\"1\">\r\n              <h3>Plant</h3>\r\n              <p><strong>Scientific Name:</strong> {scientificName}</p>\r\n              <p><strong>Genus:</strong> {genusName}</p>\r\n              <p><strong>Family:</strong> {familyName}</p>\r\n              <p><strong>Common Names:</strong> {commonNames}</p>\r\n            </div>\r\n          );\r\n\r\n          setPlantInfo(plantDetails); // Set the plant information\r\n        } else {\r\n          setPlantInfo(<p>No plant data available</p>);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error identifying the plant:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle search input and make an API call to Chat API\r\n  const handleChatGPTQuery = async () => {\r\n    if (searchQuery) {\r\n      try {\r\n        const response = await fetch('https://api.deepbricks.ai/v1/chat/completions', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer sk-Ya1lYbp8LYSBosl7WLBiWcaYCBaWCRoRMlABV0UBPubQPghg` // Replace with your actual key\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"gpt-4o\",\r\n            messages: [{ role: \"user\", content: searchQuery }],\r\n            max_tokens: 500 // Increased token limit to allow for longer responses\r\n          })\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n  \r\n        const data = await response.json();\r\n        const chatCompletion = data.choices[0]?.message?.content || 'No response from ChatGPT';\r\n  \r\n        // Update the state with the ChatGPT response\r\n        setChatResponse(chatCompletion);\r\n      } catch (error) {\r\n        console.error('Error fetching chat response:', error);\r\n        setChatResponse('Error fetching chat response.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"plant-search-container\">\r\n      <h1>Learn more about your plants</h1>\r\n      <img src=\"/Picture4.png\" alt=\"Plant\" className=\"plant-image\" />\r\n\r\n      <div className=\"camera-capture\">\r\n        <label htmlFor=\"cameraInput\" className=\"camera-label\">\r\n          Capture with Camera\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          capture=\"environment\" // Use the rear camera on mobile devices\r\n          id=\"cameraInput\"\r\n          className=\"camera-input\"\r\n          onChange={handleCapture} // This should work correctly now\r\n        />\r\n      </div>\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Search your plant...\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n          onKeyDown={(e) => { if (e.key === 'Enter') handleChatGPTQuery(); }} // Trigger on Enter key\r\n        />\r\n      </div>\r\n\r\n      {/* Display plant info from API */}\r\n      {plantInfo && <div className=\"plant-info\">{plantInfo}</div>}\r\n\r\n      {/* Display ChatGPT API response */}\r\n      {chatResponse && <div className=\"chat-response\"><h3>Plant AI assistant</h3><p>{chatResponse}</p></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlantSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}